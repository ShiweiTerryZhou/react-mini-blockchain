{"version":3,"sources":["App.js","components/BlockChainItem.js","serviceWorker.js","index.js"],"names":["crypto","require","App","props","today","Date","state","currentTransaction","chain","index","timestamp","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","proof","transaction","previous_hash","verified","generateBlocks","bind","handleTransacChange","setVerification","updateVerification","reVerification","prev_block","prev_data","String","Buffer","from","toString","time","cur_data","cur_proof","cur_hash","substring","cur_data_try","pwd","split","reverse","join","createHash","update","digest","new_block","this","setState","concat","e","target","value","veriStatus","i","length","className","style","paddingLeft","paddingRight","bg","variant","expand","Brand","fontWeight","Toggle","aria-controls","Collapse","id","Link","href","Dialog","minWidth","Header","Title","Body","Footer","map","item","key","marginLeft","marginRight","Group","controlId","Label","Control","type","placeholder","onChange","onClick","slice","Component","BlockChainItem","cardBackground","hash","handleChange","flag","new_transaction","new_proof","new_timestamp","prevProps","console","log","width","background","marginBottom","Text","size","defaultValue","onInput","readOnly","Item","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.d962582f.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Nav, Navbar, Button, Form, Modal, Row } from \"react-bootstrap\";\r\nimport \"./App.css\";\r\nimport BlockChainItem from \"./components/BlockChainItem\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nconst crypto = require(\"crypto\");\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    let today = new Date();\r\n    this.state = {\r\n      currentTransaction: \"\",\r\n      chain: [\r\n        {\r\n          index: 0,\r\n          timestamp:\r\n            today.getFullYear() +\r\n            \"-\" +\r\n            (today.getMonth() + 1) +\r\n            \"-\" +\r\n            today.getDate() +\r\n            \" \" +\r\n            today.getHours() +\r\n            \":\" +\r\n            today.getMinutes() +\r\n            \":\" +\r\n            today.getSeconds(),\r\n          proof: 1,\r\n          transaction: \"This is genesis block\",\r\n          previous_hash: \"0\",\r\n          verified: 1,\r\n        },\r\n      ],\r\n    };\r\n\r\n    this.generateBlocks = this.generateBlocks.bind(this);\r\n    this.handleTransacChange = this.handleTransacChange.bind(this);\r\n    this.setVerification = this.setVerification.bind(this);\r\n    this.updateVerification = this.updateVerification.bind(this);\r\n    this.reVerification = this.reVerification.bind(this);\r\n  }\r\n\r\n  /* \r\n  hashing algorithm:\r\n  SHA256(inverse(previous block hash) + ASCii(index + timestamp + transaction + proof))\r\n  */\r\n  generateBlocks(prev_block, transaction) {\r\n    let prev_data = String(prev_block.previous_hash);\r\n    prev_data = Buffer.from(prev_data, \"utf8\").toString(\"hex\");\r\n\r\n    let today = new Date();\r\n    let time =\r\n      today.getFullYear() +\r\n      \"-\" +\r\n      (today.getMonth() + 1) +\r\n      \"-\" +\r\n      today.getDate() +\r\n      \" \" +\r\n      today.getHours() +\r\n      \":\" +\r\n      today.getMinutes() +\r\n      \":\" +\r\n      today.getSeconds();\r\n    let cur_data =\r\n      String(prev_block.index + 1) + String(time) + String(transaction);\r\n    let cur_proof = 0;\r\n    let cur_hash = \"\";\r\n\r\n    //let pwd = parseInt(prev_data, 16) - parseInt(cur_data_encode, 16)\r\n    //console.log(String(crypto.createHash('sha256').update(pwd).digest('hex')))\r\n    //\r\n    while (cur_hash.substring(0, 2) !== \"00\") {\r\n      cur_proof = cur_proof + 1;\r\n      let cur_data_try = cur_data + String(cur_proof);\r\n      //make previous has reverse to prevent constant 0s in front\r\n      let pwd = prev_data.split(\"\").reverse().join(\"\") + cur_data_try;\r\n      cur_hash = String(crypto.createHash(\"sha256\").update(pwd).digest(\"hex\"));\r\n    }\r\n\r\n    let new_block = {\r\n      index: prev_block.index + 1,\r\n      timestamp: time,\r\n      proof: cur_proof,\r\n      transaction: transaction,\r\n      previous_hash: cur_hash,\r\n      verified: 1,\r\n    };\r\n    this.setState((state) => {\r\n      const chain = state.chain.concat(new_block);\r\n      return {\r\n        chain,\r\n      };\r\n    });\r\n  }\r\n\r\n  handleTransacChange(e) {\r\n    this.setState({ currentTransaction: e.target.value });\r\n  }\r\n\r\n  setVerification(index, veriStatus) {\r\n    if (veriStatus === 0 || veriStatus === -1) {\r\n      this.setState((state) => {\r\n        const chain = state.chain;\r\n        for (let i = index; i < chain.length; i++) {\r\n          chain[i].verified = veriStatus;\r\n        }\r\n        return {\r\n          chain,\r\n        };\r\n      });\r\n    }\r\n  }\r\n\r\n  reVerification(index, transaction, timestamp) {\r\n    if (index === 0) {\r\n      return;\r\n    }\r\n    let prev_block = this.state.chain[index - 1];\r\n    let prev_data = String(prev_block.previous_hash);\r\n    prev_data = Buffer.from(prev_data, \"utf8\").toString(\"hex\");\r\n    let cur_data = String(index) + String(timestamp) + String(transaction);\r\n    let cur_proof = 0;\r\n    let cur_hash = \"\";\r\n    while (cur_hash.substring(0, 2) !== \"00\") {\r\n      cur_proof = cur_proof + 1;\r\n      let cur_data_try = cur_data + String(cur_proof);\r\n      //make previous has reverse to prevent constant 0s in front\r\n      let pwd = prev_data.split(\"\").reverse().join(\"\") + cur_data_try;\r\n      cur_hash = String(crypto.createHash(\"sha256\").update(pwd).digest(\"hex\"));\r\n    }\r\n    this.setState((state) => {\r\n      let chain = state.chain;\r\n      chain[index].previous_hash = cur_hash;\r\n      chain[index].proof = cur_proof;\r\n      chain[index].verified = 1;\r\n      return {\r\n        chain,\r\n      };\r\n    });\r\n  }\r\n\r\n  updateVerification(index, transaction, proof, timestamp) {\r\n    if (index === 0) {\r\n      return;\r\n    }\r\n    let prev_block = this.state.chain[index - 1];\r\n    let prev_data = String(prev_block.previous_hash);\r\n    prev_data = Buffer.from(prev_data, \"utf8\").toString(\"hex\");\r\n    let cur_data = String(index) + String(timestamp) + String(transaction);\r\n    let cur_proof = proof;\r\n    let cur_hash = \"\";\r\n    let cur_data_try = cur_data + String(cur_proof);\r\n    let pwd = prev_data.split(\"\").reverse().join(\"\") + cur_data_try;\r\n    cur_hash = String(crypto.createHash(\"sha256\").update(pwd).digest(\"hex\"));\r\n    this.setState((state) => {\r\n      let chain = state.chain;\r\n      chain[index].previous_hash = cur_hash;\r\n      chain[index].proof = proof;\r\n      chain[index].transaction = transaction;\r\n      chain[index].timestamp = timestamp;\r\n      if (cur_hash.substring(0, 2) === \"00\") {\r\n        for (let i = index; i < chain.length; i++) {\r\n          chain[i].verified = 0;\r\n        }\r\n      } else {\r\n        for (let i = index; i < chain.length; i++) {\r\n          chain[i].verified = -1;\r\n        }\r\n      }\r\n      return {\r\n        chain,\r\n      };\r\n    });\r\n  }\r\n\r\n  componentDidMount() {}\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Navbar\r\n          style={{\r\n            paddingLeft: \"50px\",\r\n            paddingRight: \"50px\",\r\n          }}\r\n          bg=\"dark\"\r\n          variant=\"dark\"\r\n          expand=\"lg\"\r\n        >\r\n          <Navbar.Brand style={{ fontWeight: \"bold\" }}>\r\n            Mini BlockChain by Shiwei Zhou\r\n          </Navbar.Brand>\r\n          <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n          <Navbar.Collapse id=\"basic-navbar-nav\">\r\n            <Nav className=\"ml-auto\">\r\n              <Nav.Link href=\"http://www.terryzsw.com\">\r\n                Back to my home page\r\n              </Nav.Link>\r\n            </Nav>\r\n          </Navbar.Collapse>\r\n        </Navbar>\r\n        <div className=\"container\">\r\n          <Modal.Dialog style={{ minWidth: \"100%\" }}>\r\n            <Modal.Header>\r\n              <Modal.Title>Instruction</Modal.Title>\r\n            </Modal.Header>\r\n\r\n            <Modal.Body>\r\n              <div className=\"container\">\r\n                <p>\r\n                  Click GenerateBlocks to create new blocks with content you\r\n                  want in 'Next transaction' input box\r\n                </p>\r\n                <br />\r\n                <p>\r\n                  Change transaction coneten in block to see what will happen\r\n                </p>\r\n                <br />\r\n                <p>\r\n                  Click 'Re-Hash This Block' to generate new proof for valid\r\n                  hash. (Valid hash have to start with 00)\r\n                </p>\r\n                <br />\r\n                <p>\r\n                  Green card means verified block. Yellow card means uncerified\r\n                  block with valid hash. Red card means unvalid hash or broken\r\n                  link.\r\n                </p>\r\n                <br />\r\n              </div>\r\n            </Modal.Body>\r\n\r\n            <Modal.Footer>\r\n              <p>Have Fun</p>\r\n            </Modal.Footer>\r\n          </Modal.Dialog>\r\n        </div>\r\n        <div\r\n          className=\"row\"\r\n          style={{\r\n            paddingLeft: \"50px\",\r\n            paddingRight: \"50px\",\r\n          }}\r\n        >\r\n          {this.state.chain.map((item) => (\r\n            <BlockChainItem\r\n              updateVerification={this.updateVerification}\r\n              reVerification={this.reVerification}\r\n              key={item.index}\r\n              item={item}\r\n              style={{ marginLeft: \"20%\", marginRight: \"20%\" }}\r\n            />\r\n          ))}\r\n        </div>\r\n        <br />\r\n        <Form.Group\r\n          controlId=\"transactionForm\"\r\n          style={{ marginLeft: \"20%\", marginRight: \"20%\" }}\r\n        >\r\n          <Form.Label>Next transaction</Form.Label>\r\n          <Form.Control\r\n            type=\"text\"\r\n            placeholder=\"It can be any message\"\r\n            onChange={(e) => this.handleTransacChange(e)}\r\n          />\r\n        </Form.Group>\r\n        <Button\r\n          variant=\"primary\"\r\n          onClick={(e) =>\r\n            this.generateBlocks(\r\n              this.state.chain.slice(-1)[0],\r\n              this.state.currentTransaction,\r\n              e\r\n            )\r\n          }\r\n        >\r\n          GenerateBlocks\r\n        </Button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React, { Component } from \"react\";\r\nimport { Button, Card, Form, ListGroup } from \"react-bootstrap\";\r\n\r\nclass BlockChainItem extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    const {\r\n      index,\r\n      timestamp,\r\n      proof,\r\n      transaction,\r\n      previous_hash,\r\n    } = this.props.item;\r\n    this.state = {\r\n      cardBackground: [144, 230, 144],\r\n      hash: previous_hash,\r\n      proof: proof,\r\n      timestamp: timestamp,\r\n      transaction: transaction,\r\n      index: index,\r\n    };\r\n    this.handleChange = this.handleChange.bind(this);\r\n  }\r\n\r\n  handleChange(e, flag) {\r\n    let {\r\n      index,\r\n      timestamp,\r\n      proof,\r\n      transaction,\r\n      previous_hash,\r\n    } = this.props.item;\r\n    switch (flag) {\r\n      case 0:\r\n        let new_transaction = e.target.value;\r\n        this.setState((state) => {\r\n          state.transaction = new_transaction;\r\n        });\r\n        this.props.updateVerification(index, new_transaction, proof, timestamp);\r\n        break;\r\n      case 1:\r\n        let new_proof = e.target.value;\r\n        this.setState((state) => {\r\n          state.transaction = new_proof;\r\n        });\r\n        this.props.updateVerification(index, transaction, new_proof, timestamp);\r\n        break;\r\n      case 2:\r\n        let new_timestamp = e.target.value;\r\n        this.setState((state) => {\r\n          state.transaction = new_timestamp;\r\n        });\r\n        this.props.updateVerification(index, transaction, proof, new_timestamp);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n\r\n  componentWillReceiveProps(props) {\r\n    this.setState((state) => {\r\n      state.hash = this.props.item.previous_hash;\r\n    });\r\n    if (this.props.item.verified === 1) {\r\n      this.setState((state) => {\r\n        state.cardBackground = [144, 230, 144];\r\n      });\r\n    } else if (this.props.item.verified === 0) {\r\n      this.setState((state) => {\r\n        state.cardBackground = [255, 255, 153];\r\n      });\r\n    } else if (this.props.item.verified === -1) {\r\n      this.setState((state) => {\r\n        state.cardBackground = [255, 204, 203];\r\n      });\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if (this.props.item !== prevProps.item) {\r\n      this.setState((state) => {\r\n        state.hash = this.props.item.previous_hash;\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    console.log(this.state);\r\n    const {\r\n      index,\r\n      timestamp,\r\n      proof,\r\n      transaction,\r\n      previous_hash,\r\n    } = this.props.item;\r\n    return (\r\n      <div>\r\n        {/* index: {index} <br />\r\n                hash: {previous_hash} <br />\r\n                transaction: {transaction} <br />\r\n                proof: {proof} <br />\r\n                timestamp: {timestamp} <br /> */}\r\n        <Card\r\n          style={{\r\n            width: \"18rem\",\r\n            background: \"rgb(\" + this.state.cardBackground + \")\",\r\n            marginLeft: \"50px\",\r\n            marginBottom: \"50px\",\r\n          }}\r\n        >\r\n          <Card.Body>\r\n            <Card.Title>Block Index: {index}</Card.Title>\r\n            <Card.Text>\r\n              <Form.Group>\r\n                transaction:{\" \"}\r\n                <Form.Control\r\n                  size=\"sm\"\r\n                  type=\"text\"\r\n                  defaultValue={transaction}\r\n                  placeholder=\"transaction\"\r\n                  onInput={(e) => this.handleChange(e, 0)}\r\n                />\r\n                proof:{\" \"}\r\n                <Form.Control\r\n                  size=\"sm\"\r\n                  type=\"number\"\r\n                  value={proof}\r\n                  placeholder=\"proof\"\r\n                  onInput={(e) => this.handleChange(e, 1)}\r\n                  readOnly\r\n                />\r\n                timestamp:{\" \"}\r\n                <Form.Control\r\n                  size=\"sm\"\r\n                  type=\"text\"\r\n                  defaultValue={timestamp}\r\n                  placeholder=\"timestamp\"\r\n                  onInput={(e) => this.handleChange(e, 2)}\r\n                  readOnly\r\n                />\r\n                original hash:{\" \"}\r\n                <Form.Control\r\n                  size=\"sm\"\r\n                  type=\"text\"\r\n                  defaultValue={this.state.hash}\r\n                  placeholder=\"hash\"\r\n                  readOnly\r\n                />\r\n                current hash:{\" \"}\r\n                <ListGroup>\r\n                  <ListGroup.Item>{this.state.hash}</ListGroup.Item>\r\n                </ListGroup>\r\n              </Form.Group>\r\n            </Card.Text>\r\n            <Button\r\n              variant=\"primary\"\r\n              onClick={() =>\r\n                this.props.reVerification(\r\n                  this.state.index,\r\n                  this.state.transaction,\r\n                  this.state.timestamp\r\n                )\r\n              }\r\n            >\r\n              Re-Hash This Block\r\n            </Button>\r\n          </Card.Body>\r\n        </Card>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default BlockChainItem;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}